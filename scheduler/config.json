{
  "tasks": [
    {
      "id": "morning-review",
      "name": "Morning Review",
      "schedule": "24 8 * * *",
      "enabled": true,
      "type": "http",
      "config": {
        "method": "POST",
        "url": "http://dev.otherstuff.studio:3000/api/triggers/",
        "headers": {
          "Authorization": "Bearer your_secure_trigger_token_here",
          "Content-Type": "application/json"
        },
        "body": {
          "recipe_id": "fc2a7ed7e0fa93f5f5f28648b683efb1",
          "prompt": "Please review both my Obsidian Vault using Obsidian MCP and my file system in ~/code and provide me with a todo list of where I should focus this morning. please create a new document in Obsidian vault /actions/<YYMMDD>-MorningReview.md",
          "session_name": "Morning Review 1"
        }
      }
    },
    {
      "id": "grug-complexity-review",
      "name": "Grug Brain Complexity Review",
      "schedule": "0 0 * * *",
      "enabled": true,
      "type": "http",
      "config": {
        "method": "POST",
        "url": "http://dev.otherstuff.studio:3000/api/triggers/",
        "headers": {
          "Authorization": "Bearer your_secure_trigger_token_here",
          "Content-Type": "application/json"
        },
        "body": {
          "recipe_id": "d6ac804b78094b59298ca366efca6137",
          "prompt": "Grug need review code changes from last 24 hours. Listen careful:\n\n1. First, Grug search ~/code directory for all git repositories\n2. For each repository with changes in last 24 hours (use 'git log --since=\"24 hours ago\"'), Grug review:\n   - All modified and new code files (use 'git diff HEAD~1' or 'git show' for recent commits)\n   - Focus on JavaScript, TypeScript, Python, and configuration files\n\n3. Grug look for complexity demons:\n   - Too many abstraction layers (more than 2-3 deep = bad)\n   - Functions doing too many things (if can't explain in one sentence = bad)\n   - Overly clever code that future Grug won't understand at 3am\n   - Unnecessary dependencies added when simple solution exist\n   - Complex state management when simple variable work fine\n   - Over-engineering for problems that don't exist yet\n\n4. Grug also check for security issues:\n   - Hardcoded secrets, API keys, passwords (very bad!)\n   - SQL injection vulnerabilities (use prepared statements!)\n   - Unvalidated user input\n   - Exposed sensitive data in logs\n   - Missing error handling that could leak information\n   - Dependencies with known vulnerabilities\n\n5. For each issue found, Grug write:\n   - File path and line numbers\n   - What complexity demon or security issue Grug see\n   - Simple solution Grug recommend (remember: boring = good)\n   - Example of better code if needed\n\n6. Grug create comprehensive review document in Obsidian at path: /review/<MMDD>-GrugSlaysComplexity.md\n   Document should have:\n   - Summary section: How many repositories reviewed, total issues found\n   - Critical Security Issues section (if any found - these urgent!)\n   - Complexity Issues by Repository (grouped by repo, then by file)\n   - Grug's Wisdom section: General patterns noticed, advice for team\n   - Tomorrow's Focus: Top 3 things to fix first\n\nGrug want honest review. If code good and simple, Grug say so. If code have complexity demon, Grug bonk with club and show better way. Remember: Grug not mean, Grug want help make code that work at 3am when everything on fire.\n\nUse format <MMDD> for today's date in filename. Make review easy to read and actionable.",
          "session_name": "Grug Daily Review"
        }
      }
    }
  ],
  "timezone": "system",
  "logLevel": "info"
}
